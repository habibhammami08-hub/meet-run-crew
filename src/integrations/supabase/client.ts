// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qnupinrsetomnsdchhfa.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFudXBpbnJzZXRvbW5zZGNoaGZhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5OTQ0OTUsImV4cCI6MjA3MDU3MDQ5NX0.vAK-xeUxQeQy1lUz9SlzRsVTEFiyJj_HIbnP-xlLThg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
  realtime: {
    params: { 
      eventsPerSecond: 10 
    },
  },
});

// Connection check utility
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) throw error;
    if (import.meta.env.DEV) {
      console.log("[supabase] Connection established");
    }
    return true;
  } catch (error) {
    if (import.meta.env.DEV) {
      console.error("[supabase] Connection error:", error);
    }
    return false;
  }
};

// Robust user profile management utility  
export const ensureUserProfile = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return null;

  const { data: profile, error: selErr } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .maybeSingle();
  if (selErr && selErr.code !== 'PGRST116') throw selErr;
  if (profile) return profile;

  const payload = {
    id: user.id,
    email: user.email ?? '',
    full_name: user.user_metadata?.full_name || user.user_metadata?.name || null,
  };
  const { data: created, error: insErr } = await supabase.from('profiles').insert(payload).select('*').single();
  if (insErr) throw insErr;
  return created;
};

// Hook profile creation to auth state changes
supabase.auth.onAuthStateChange(async () => {
  try { 
    await ensureUserProfile(); 
  } catch (e) { 
    console.error('[profile]', e); 
  }
});