// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Debug environment variables
console.log('üîç Environment Debug Info:');
console.log('- import.meta.env.DEV:', import.meta.env.DEV);
console.log('- import.meta.env.PROD:', import.meta.env.PROD);
console.log('- import.meta.env.MODE:', import.meta.env.MODE);
console.log('- Available env vars:', Object.keys(import.meta.env).filter(key => key.startsWith('VITE_')));
console.log('- VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL ? 'PRESENT' : 'MISSING');
console.log('- VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'PRESENT' : 'MISSING');

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL!;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY!;

console.log('üìã Final values:');
console.log('- SUPABASE_URL type:', typeof SUPABASE_URL, 'value:', SUPABASE_URL ? 'SET' : 'EMPTY');
console.log('- SUPABASE_ANON_KEY type:', typeof SUPABASE_ANON_KEY, 'value:', SUPABASE_ANON_KEY ? 'SET' : 'EMPTY');

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Missing environment variables:');
  console.error('- VITE_SUPABASE_URL:', SUPABASE_URL || 'undefined');
  console.error('- VITE_SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY || 'undefined');
  console.error('- All import.meta.env:', import.meta.env);
  
  // Instead of throwing immediately, let's show a helpful error page
  const missingVars = [];
  if (!SUPABASE_URL) missingVars.push('VITE_SUPABASE_URL');
  if (!SUPABASE_ANON_KEY) missingVars.push('VITE_SUPABASE_ANON_KEY');
  
  // Store missing vars for error component to display
  (window as any).__LOVABLE_ENV_ERROR__ = {
    missingVars,
    timestamp: new Date().toISOString()
  };
  
  throw new Error("Missing Supabase env vars: VITE_SUPABASE_URL and/or VITE_SUPABASE_ANON_KEY");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
  realtime: {
    params: { 
      eventsPerSecond: 10 
    },
  },
});

// Connection check utility
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) throw error;
    if (import.meta.env.DEV) {
      console.log("[supabase] Connection established");
    }
    return true;
  } catch (error) {
    if (import.meta.env.DEV) {
      console.error("[supabase] Connection error:", error);
    }
    return false;
  }
};

// Robust user profile management utility  
export const ensureUserProfile = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return null;

  const { data: profile, error: selErr } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .maybeSingle();
  if (selErr && selErr.code !== 'PGRST116') throw selErr;
  if (profile) return profile;

  const payload = {
    id: user.id,
    email: user.email ?? '',
    full_name: user.user_metadata?.full_name || user.user_metadata?.name || null,
  };
  const { data: created, error: insErr } = await supabase.from('profiles').insert(payload).select('*').single();
  if (insErr) throw insErr;
  return created;
};

// Hook profile creation to auth state changes
supabase.auth.onAuthStateChange(async () => {
  try { 
    await ensureUserProfile(); 
  } catch (e) { 
    console.error('[profile]', e); 
  }
});